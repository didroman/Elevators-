class Lift:
    def __init__(self, current_floor=1):
        self.current_floor = current_floor
        self.tasks = []

    def add_tasks(self, tasks):
        for task in tasks:
            if task.strip():
                self.tasks.append(int(task))

    def move(self):
        if self.tasks:
            self.tasks.sort(key=lambda x: abs(x - self.current_floor))

            target_floor = self.tasks.pop(0)
            passed_floors = 0
            while self.current_floor != target_floor:
                if self.current_floor < target_floor:
                    self.current_floor += 1
                else:
                    self.current_floor -= 1
                passed_floors += 1
                graph_representation = self.current_position_graph()
                print(f"Текущее положение лифта в формате графа: {graph_representation}")
                print(f"Оценка оставшихся циклов до завершения задач в очереди: {len(self.tasks) + 1}")  # Перемещение вывода

                tasks_input = input("Введите номера этажей для лифта через запятую (или 'стоп' для завершения): ")
                if tasks_input.lower() == 'стоп':
                    break
                tasks = tasks_input.split(',')
                self.add_tasks(tasks)
            print(f"Lift stopped at floor {self.current_floor}.")
            print(f"Пройдено этажей: {passed_floors}")
        else:
            print("No more tasks for the lift.")

    def remaining_tasks_estimate(self):
        return len(self.tasks)

    def current_position_graph(self):
        floors = 10
        graph = ""
        for i in range(1, floors + 1):
            if i == self.current_floor:
                graph += f"({i})"
            else:
                graph += str(i)
            if i != floors:
                graph += "--"
        return graph

lift = Lift()

stops = 0

while True:
    tasks_input = input("Введите номера этажей для лифта через запятую (или 'стоп' для завершения): ")
    if tasks_input.lower() == 'стоп':
        break
    tasks = tasks_input.split(',')
    lift.add_tasks(tasks)

    lift.move()

    stops += 1

    print(f"Остановок: {stops}")
    print(f"Задач в очереди: {lift.remaining_tasks_estimate()}")

print("Работа лифта завершена.")
